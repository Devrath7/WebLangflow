name: Test Docker images

on:
  push:
    branches: [main]
    paths:
      - "docker/**"
      - "poetry.lock"
      - "pyproject.toml"
      - "src/backend/**"
      - ".github/workflows/docker_test.yml"
  pull_request:
    branches: [dev]
    paths:
      - "docker/**"
      - "poetry.lock"
      - "pyproject.toml"
      - "src/**"
      - ".github/workflows/docker_test.yml"

env:
  POETRY_VERSION: "1.8.2"

jobs:
  test-docker:
    runs-on: ubuntu-latest
    name: Test docker images
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -t langflowai/langflow:latest-dev \
            -f docker/build_and_push.Dockerfile \
            .
      - name: Test image
        run: |
          expected_version=$(cat pyproject.toml | grep version | head -n 1 | cut -d '"' -f 2)
          version=$(docker run --rm --entrypoint bash langflowai/langflow:latest-dev -c 'python -c "from langflow.version import __version__ as langflow_version; print(langflow_version)"')
          if [ "$expected_version" != "$version" ]; then
              echo "Expected version: $expected_version"
              echo "Actual version: $version"
              exit 1
          fi

      - name: Build backend image
        run: |
          docker build -t langflowai/langflow-backend:latest-dev \
            --build-arg LANGFLOW_IMAGE=langflowai/langflow:latest-dev \
            -f docker/build_and_push_backend.Dockerfile \
            .
      - name: Test backend image
        run: |
          expected_version=$(cat pyproject.toml | grep version | head -n 1 | cut -d '"' -f 2)
          version=$(docker run --rm --entrypoint bash langflowai/langflow-backend:latest-dev -c 'python -c "from langflow.version import __version__ as langflow_version; print(langflow_version)"')
          if [ "$expected_version" != "$version" ]; then
              echo "Expected version: $expected_version"
              echo "Actual version: $version"
              exit 1
          fi
      - name: Build frontend image
        run: |
          docker build -t langflowai/langflow-frontend:latest-dev \
            -f docker/frontend/build_and_push_frontend.Dockerfile \
            .

  test-multi-arch-build:
    runs-on: ubuntu-latest
    name: Test docker multi-arch build
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        id: qemu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        run: |
          docker buildx build -t langflowai/langflow:latest-dev \
            --platform linux/amd64,linux/arm64/v8 \
            -f docker/build_and_push.Dockerfile \
            --load \
            .
      - name: Run Container
        run: |
          docker run -d --name test_container -p 8000:8000 langflowai/langflow:latest-dev
      - name: Wait for Container to Start and Check Health
        run: |
          timeout 40 bash -c 'until curl -f http://0.0.0.0:8000/health; do sleep 1; done' || (echo "Server did not start in time" && docker logs test_container && docker stop test_container && docker rm test_container && exit 1)
      - name: Stop and Remove Container
        run: |
          docker rm -f test_container
